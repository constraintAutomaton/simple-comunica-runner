{"version":3,"file":"ActorHashQuadsSha1.js","sourceRoot":"","sources":["ActorHashQuadsSha1.ts"],"names":[],"mappings":";;;AACA,6DAA0D;AAE1D,qCAA+B;AAC/B,2CAA8C;AAE9C;;GAEG;AACH,MAAa,kBAAmB,SAAQ,+BAAc;IAC7C,KAAK,CAAC,IAAI,CAAC,MAAwB;QACxC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,yDAAyD,CAAC,CAAC;QAC/F,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,OAAyB;QACxC,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,IAAA,cAAI,GAAE;iBACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAA,6BAAgB,EAAC,IAAI,CAAC,CAAC,CAAC;iBAC9C,MAAM,CAAC,KAAK,CAAC;YAChB,cAAc,EAAE,IAAI;SACrB,CAAC;IACJ,CAAC;CACF;AAhBD,gDAgBC","sourcesContent":["import type { IActionHashQuads, IActorHashQuadsOutput } from '@comunica/bus-hash-quads';\nimport { ActorHashQuads } from '@comunica/bus-hash-quads';\nimport type { IActorTest } from '@comunica/core';\nimport { sha1 } from 'hash.js';\nimport { quadToStringQuad } from 'rdf-string';\n\n/**\n * A comunica Memento Http Actor.\n */\nexport class ActorHashQuadsSha1 extends ActorHashQuads {\n  public async test(action: IActionHashQuads): Promise<IActorTest> {\n    if (!action.allowHashCollisions) {\n      throw new Error(`Actor ${this.name} can not provide hash functions without hash collisions`);\n    }\n    return true;\n  }\n\n  public async run(_action: IActionHashQuads): Promise<IActorHashQuadsOutput> {\n    return {\n      hashFunction: quad => sha1()\n        .update(JSON.stringify(quadToStringQuad(quad)))\n        .digest('hex'),\n      hashCollisions: true,\n    };\n  }\n}\n"]}