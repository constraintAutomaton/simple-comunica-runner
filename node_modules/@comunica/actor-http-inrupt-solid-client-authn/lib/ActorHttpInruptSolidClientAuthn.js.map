{"version":3,"file":"ActorHttpInruptSolidClientAuthn.js","sourceRoot":"","sources":["ActorHttpInruptSolidClientAuthn.ts"],"names":[],"mappings":";;;AACA,iDAA+C;AAC/C,+DAAqD;AAErD,yCAAkD;AAGlD;;GAEG;AACH,MAAa,+BAAgC,SAAQ,oBAAS;IAM5D,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAmB;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAChG,MAAM,IAAI,KAAK,CAAC,2DAA2D,+BAA+B,CAAC,mBAAmB,CAAC,IAAI,GAAG,CAAC,CAAC;QAC1I,CAAC;QACD,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,0BAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACvC,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,OAAO,GAAY,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,mBAAmB,CAAE,CAAC;QAClG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,MAAM,IAAI,KAAK,CAAC,uGAAuG,CAAC,CAAC;QAC3H,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,OAAO,GAAY,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,mBAAmB,CAAE,CAAC;QAClG,cAAc;QACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,uBAAuB,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;YACpF,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,MAAM,CAAC,KAAK,CAAC,GAAG,iCAAiC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAEzE,qCAAqC;QACrC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC/B,GAAG,MAAM;YACT,OAAO,EAAE,MAAM,CAAC,OAAO;iBACpB,MAAM,CAAC,+BAA+B,CAAC,mBAAmB,CAAC;iBAC3D,GAAG,CAAC,0BAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC;SACtC,CAAC,CAAC;IACL,CAAC;;AAtCH,0EAuCC;AAtCwB,mDAAmB,GACxC,IAAI,uBAAgB,CAAU,wDAAwD,CAAC,CAAC","sourcesContent":["import type { IActionHttp, IActorHttpOutput } from '@comunica/bus-http';\nimport { ActorHttp } from '@comunica/bus-http';\nimport { KeysHttp } from '@comunica/context-entries';\nimport type { IActorArgs, IActorTest, Mediator } from '@comunica/core';\nimport { ActionContextKey } from '@comunica/core';\nimport type { Session } from '@rubensworks/solid-client-authn-isomorphic';\n\n/**\n * A comunica Inrupt Solid Client Authn Http Actor.\n */\nexport class ActorHttpInruptSolidClientAuthn extends ActorHttp {\n  public static readonly CONTEXT_KEY_SESSION =\n    new ActionContextKey<Session>('@comunica/actor-http-inrupt-solid-client-authn:session');\n\n  public readonly mediatorHttp: Mediator<ActorHttp, IActionHttp, IActorTest, IActorHttpOutput>;\n\n  public constructor(args: IActorHttpInruptSolidClientAuthnArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionHttp): Promise<IActorTest> {\n    if (!action.context || !action.context.has(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)) {\n      throw new Error(`Unable to find Solid authn session in context with key '${ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION.name}'`);\n    }\n    if (action.context.has(KeysHttp.fetch)) {\n      throw new Error(`Unable to run when a custom fetch function has been configured`);\n    }\n    const session: Session = action.context.get(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)!;\n    if (!session.info.isLoggedIn) {\n      throw new Error(`The provided Solid authn session is not in a logged in state, make sure to call session.login() first`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionHttp): Promise<IActorHttpOutput> {\n    const session: Session = action.context.get(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)!;\n    // Log request\n    this.logInfo(action.context, `Handling request to ${typeof action.input === 'string' ?\n      action.input :\n      action.input.url} as authenticated request for ${session.info.webId}`);\n\n    // Override fetch function in context\n    return this.mediatorHttp.mediate({\n      ...action,\n      context: action.context\n        .delete(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)\n        .set(KeysHttp.fetch, session.fetch),\n    });\n  }\n}\n\nexport interface IActorHttpInruptSolidClientAuthnArgs extends IActorArgs<IActionHttp, IActorTest, IActorHttpOutput> {\n  mediatorHttp: Mediator<ActorHttp, IActionHttp, IActorTest, IActorHttpOutput>;\n}\n"]}