"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActorHttpInruptSolidClientAuthn = void 0;
const bus_http_1 = require("@comunica/bus-http");
const context_entries_1 = require("@comunica/context-entries");
const core_1 = require("@comunica/core");
/**
 * A comunica Inrupt Solid Client Authn Http Actor.
 */
class ActorHttpInruptSolidClientAuthn extends bus_http_1.ActorHttp {
    constructor(args) {
        super(args);
    }
    async test(action) {
        if (!action.context || !action.context.has(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)) {
            throw new Error(`Unable to find Solid authn session in context with key '${ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION.name}'`);
        }
        if (action.context.has(context_entries_1.KeysHttp.fetch)) {
            throw new Error(`Unable to run when a custom fetch function has been configured`);
        }
        const session = action.context.get(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION);
        if (!session.info.isLoggedIn) {
            throw new Error(`The provided Solid authn session is not in a logged in state, make sure to call session.login() first`);
        }
        return true;
    }
    async run(action) {
        const session = action.context.get(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION);
        // Log request
        this.logInfo(action.context, `Handling request to ${typeof action.input === 'string' ?
            action.input :
            action.input.url} as authenticated request for ${session.info.webId}`);
        // Override fetch function in context
        return this.mediatorHttp.mediate({
            ...action,
            context: action.context
                .delete(ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION)
                .set(context_entries_1.KeysHttp.fetch, session.fetch),
        });
    }
}
exports.ActorHttpInruptSolidClientAuthn = ActorHttpInruptSolidClientAuthn;
ActorHttpInruptSolidClientAuthn.CONTEXT_KEY_SESSION = new core_1.ActionContextKey('@comunica/actor-http-inrupt-solid-client-authn:session');
//# sourceMappingURL=ActorHttpInruptSolidClientAuthn.js.map