{"version":3,"file":"ActorRdfJoinHash.js","sourceRoot":"","sources":["ActorRdfJoinHash.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActionRdfJoin, IActorRdfJoinOutputInner, IActorRdfJoinArgs } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { Bindings, MetadataBindings } from '@comunica/types';\nimport { HashJoin } from 'asyncjoin';\n\n/**\n * A comunica Hash RDF Join Actor.\n */\nexport class ActorRdfJoinHash extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'hash',\n      limitEntries: 2,\n      requiresVariableOverlap: true,\n    });\n  }\n\n  public async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    let metadatas = await ActorRdfJoin.getMetadatas(action.entries);\n\n    // Ensure the left build stream is the smallest\n    // TODO: in the next major version, use ActorRdfJoin.sortJoinEntries, which requires mediatorJoinEntriesSort\n    if (metadatas[1].cardinality.value < metadatas[0].cardinality.value) {\n      metadatas = [ metadatas[1], metadatas[0] ];\n      action = { ...action, entries: [ action.entries[1], action.entries[0] ]};\n    }\n\n    const variables = ActorRdfJoin.overlappingVariables(metadatas);\n    const join = new HashJoin<Bindings, string, Bindings>(\n      action.entries[0].output.bindingsStream,\n      action.entries[1].output.bindingsStream,\n      entry => ActorRdfJoin.hash(entry, variables),\n      <any> ActorRdfJoin.joinBindings,\n    );\n    return {\n      result: {\n        type: 'bindings',\n        bindingsStream: join,\n        metadata: async() => await this.constructResultMetadata(action.entries, metadatas, action.context),\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    metadatas: MetadataBindings[],\n  ): Promise<IMediatorTypeJoinCoefficients> {\n    // Ensure the left build stream is the smallest\n    if (metadatas[1].cardinality.value < metadatas[0].cardinality.value) {\n      metadatas = [ metadatas[1], metadatas[0] ];\n    }\n\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    return {\n      iterations: metadatas[0].cardinality.value + metadatas[1].cardinality.value,\n      persistedItems: metadatas[0].cardinality.value,\n      blockingItems: metadatas[0].cardinality.value,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1],\n    };\n  }\n}\n"]}