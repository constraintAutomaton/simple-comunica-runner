{"version":3,"file":"BindingsIndexDef.js","sourceRoot":"","sources":["BindingsIndexDef.ts"],"names":[],"mappings":";;;AAGA;;;;;GAKG;AACH,MAAa,gBAAgB;IAK3B,YAAmB,IAAoB,EAAE,MAA4D;QACnG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAEM,GAAG,CAAC,QAAsB,EAAE,KAAQ;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;IAC9D,CAAC;IAEM,GAAG,CAAC,QAAsB;QAC/B,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAClC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACxB,CAAC;IAEM,QAAQ,CAAC,QAAsB;QACpC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC;IAEM,MAAM;QACX,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;CACF;AA3BD,4CA2BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IBindingsIndex } from './IBindingsIndex';\n\n/**\n * A simple efficient hash-based index for maintaining bindings,\n * and checking whether or not a bindings is contained in this index.\n *\n * This can not handle bindings with undefined values.\n */\nexport class BindingsIndexDef<V> implements IBindingsIndex<V> {\n  private readonly keys: RDF.Variable[];\n  private readonly hashFn: (term: RDF.Bindings, keys: RDF.Variable[]) => string;\n  private readonly index: Record<string, V>;\n\n  public constructor(keys: RDF.Variable[], hashFn: (term: RDF.Bindings, keys: RDF.Variable[]) => string) {\n    this.keys = keys;\n    this.hashFn = hashFn;\n    this.index = {};\n  }\n\n  public put(bindings: RDF.Bindings, value: V): V {\n    return this.index[this.hashFn(bindings, this.keys)] = value;\n  }\n\n  public get(bindings: RDF.Bindings): V[] {\n    const v = this.getFirst(bindings);\n    return v ? [ v ] : [];\n  }\n\n  public getFirst(bindings: RDF.Bindings): V | undefined {\n    return this.index[this.hashFn(bindings, this.keys)];\n  }\n\n  public values(): V[] {\n    return Object.values(this.index);\n  }\n}\n"]}