{"version":3,"file":"BindingsIndexUndef.js","sourceRoot":"","sources":["BindingsIndexUndef.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Bindings } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { IBindingsIndex } from './IBindingsIndex';\n\n/**\n * A simple efficient tree-based index for maintaining bindings,\n * and checking whether or not a bindings is contained in this index.\n *\n * This will consider bindings with a variable term or an undefined term\n * as a 'match-all' with other terms.\n */\nexport class BindingsIndexUndef<V> implements IBindingsIndex<V> {\n  private readonly keys: RDF.Variable[];\n  private readonly data: IDataIndex<V> = {};\n  private readonly hashFn: (term: RDF.Term | undefined) => string;\n\n  public constructor(keys: RDF.Variable[], hashFn: (term: RDF.Term | undefined) => string) {\n    this.keys = keys;\n    this.hashFn = hashFn;\n  }\n\n  /**\n   * Add the given bindings to the index.\n   * @param {Bindings} bindings A bindings.\n   * @param {V} value The value to put.\n   */\n  public put(bindings: Bindings, value: V): V {\n    if (this.isBindingsValid(bindings)) {\n      let dataIt: IDataIndex<V> | V = this.data;\n      for (let i = 0; i < this.keys.length; i++) {\n        const key = this.keys[i];\n        const dataKey = this.hashFn(bindings.get(key));\n        let subDataIt: IDataIndex<V> | V | undefined = (<IDataIndex<V>> dataIt)[dataKey];\n        if (!subDataIt) {\n          subDataIt = ((<IDataIndex<V>> dataIt))[dataKey] = i === this.keys.length - 1 ? value : {};\n        }\n        dataIt = subDataIt;\n      }\n    }\n    return value;\n  }\n\n  protected isBindingsValid(bindings: Bindings): boolean {\n    let validKeys = false;\n    for (const key of this.keys) {\n      if (bindings.has(key)) {\n        validKeys = true;\n        break;\n      }\n    }\n    return validKeys;\n  }\n\n  /**\n   * Get the value of the given bindings is contained in this index.\n   * @param {Bindings} bindings A bindings.\n   * @return {V[]} The values.\n   */\n  public get(bindings: Bindings): V[] {\n    // Always return undefined if the bindings contain none of the expected keys\n    if (!this.isBindingsValid(bindings)) {\n      return [];\n    }\n\n    return this.getRecursive(bindings, this.keys, [ this.data ]);\n  }\n\n  protected getRecursive(bindings: Bindings | undefined, keys: RDF.Variable[], dataIndexes: IDataIndex<V>[]): V[] {\n    if (keys.length === 0) {\n      return <V[]> dataIndexes;\n    }\n\n    let key: RDF.Variable;\n    // eslint-disable-next-line prefer-const\n    [ key, ...keys ] = keys;\n    const matchingRecursive: V[][] = [];\n    for (const data of dataIndexes) {\n      // If the index contained a variable, all terms will match.\n      const dataKey = this.hashFn(bindings?.get(key));\n      if (dataKey) {\n        // Check the entry for the term, and the variable term.\n        const subDatas = <IDataIndex<V>[]> [ data[dataKey], data[''] ].filter(Boolean);\n        if (subDatas.length === 0) {\n          continue;\n        }\n        matchingRecursive.push(this.getRecursive(bindings, keys, subDatas));\n      } else {\n        // Iterate over all entries\n        const subDatas = <IDataIndex<V>[]> Object.values(data);\n        if (subDatas.length === 0) {\n          continue;\n        }\n        matchingRecursive.push(this.getRecursive(bindings, keys, subDatas));\n      }\n    }\n    return matchingRecursive.flat();\n  }\n\n  /**\n   * Get the first value of the given bindings is contained in this index.\n   * @param {Bindings} bindings A bindings.\n   * @return {V | undefined} The value.\n   */\n  public getFirst(bindings: Bindings): V | undefined {\n    // Always return undefined if the bindings contain none of the expected keys\n    if (!this.isBindingsValid(bindings)) {\n      return undefined;\n    }\n\n    return this.getRecursiveFirst(bindings, this.keys, [ this.data ]);\n  }\n\n  protected getRecursiveFirst(bindings: Bindings, keys: RDF.Variable[], dataIndexes: IDataIndex<V>[]): V | undefined {\n    if (keys.length === 0) {\n      return <V> dataIndexes[0];\n    }\n\n    let key: RDF.Variable;\n    // eslint-disable-next-line prefer-const\n    [ key, ...keys ] = keys;\n    for (const data of dataIndexes) {\n      // If the index contained a variable, all terms will match.\n      const dataKey = this.hashFn(bindings.get(key));\n      if (dataKey) {\n        // Check the entry for the term, and the variable term.\n        const subDatas = <IDataIndex<V>[]> [ data[dataKey], data[''] ].filter(Boolean);\n        if (subDatas.length === 0) {\n          continue;\n        }\n        const ret = this.getRecursiveFirst(bindings, keys, subDatas);\n        if (ret) {\n          return ret;\n        }\n      } else {\n        // Iterate over all entries\n        const subDatas = <IDataIndex<V>[]> Object.values(data);\n        if (subDatas.length === 0) {\n          continue;\n        }\n        const ret = this.getRecursiveFirst(bindings, keys, subDatas);\n        if (ret) {\n          return ret;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  public values(): V[] {\n    return this.keys.length === 0 ? [] : this.getRecursive(undefined, this.keys, [ this.data ]);\n  }\n}\n\nexport interface IDataIndex<V> {\n  [key: string]: IDataIndex<V> | V;\n}\n"]}