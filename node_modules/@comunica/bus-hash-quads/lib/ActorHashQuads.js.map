{"version":3,"file":"ActorHashQuads.js","sourceRoot":"","sources":["ActorHashQuads.ts"],"names":[],"mappings":";;;AAAA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,cAAe,SAAQ,YAA0D;IACrG;;OAEG;IACH,YAAmB,IAAyB;QAC1C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAPD,wCAOC","sourcesContent":["import { Actor } from '@comunica/core';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediator } from '@comunica/core';\nimport type { Quad } from 'rdf-data-factory';\n\n/**\n * A comunica actor for hash-quads events.\n *\n * Actor types:\n * * Input:  IActionHashQuads:      Metadata for selecting a hash function.\n * * Test:   <none>\n * * Output: IActorHashQuadsOutput: The resulting hash function.\n *\n * @see IActionHashQuads\n * @see IActorHashQuadsOutput\n */\nexport abstract class ActorHashQuads extends Actor<IActionHashQuads, IActorTest, IActorHashQuadsOutput> {\n  /**\n   * @param args - @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   */\n  public constructor(args: IActorHashQuadsArgs) {\n    super(args);\n  }\n}\n\nexport interface IActionHashQuads extends IAction {\n  /**\n   * If hash collisions are allowed.\n   */\n  allowHashCollisions: boolean;\n}\n\nexport interface IActorHashQuadsOutput extends IActorOutput {\n  /**\n   * A string-based hash of the given object.\n   * @param {Quads} quads The quads to hash.\n   * @return {string} The object's hash.\n   */\n  hashFunction: HashFunction;\n\n  /**\n   * If hash collisions are possible with the given hash function.\n   */\n  hashCollisions: boolean;\n}\n\nexport type HashFunction = (quad: Quad) => string;\n\nexport type IActorHashQuadsArgs = IActorArgs<\nIActionHashQuads,\nIActorTest,\nIActorHashQuadsOutput\n>;\n\nexport type MediatorHashQuads = Mediator<\nActor<IActionHashQuads, IActorTest, IActorHashQuadsOutput>,\nIActionHashQuads,\nIActorTest,\nIActorHashQuadsOutput\n>;\n"]}