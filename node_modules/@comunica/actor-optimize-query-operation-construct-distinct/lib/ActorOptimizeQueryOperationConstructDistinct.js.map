{"version":3,"file":"ActorOptimizeQueryOperationConstructDistinct.js","sourceRoot":"","sources":["ActorOptimizeQueryOperationConstructDistinct.ts"],"names":[],"mappings":";;;AAKA,yFAAqF;AACrF,6DAAmE;AAGnE,qDAAuC;AAEvC;;GAEG;AACH,MAAa,4CAA6C,SAAQ,0DAA2B;IAC3F,YAAmB,IAAsC;QACvD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAqC;QACrD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oBAAa,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,gCAAgC,CAAC,CAAC;QAChE,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAqC;QACpD,MAAM,SAAS,GAAG,sBAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE;YACpD,SAAS,CAAC,EAAqB,EAAE,OAAgB;gBAC/C,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC;iBAC/E,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QACH,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,oBAAa,CAAC,iBAAiB,CAAC,EAAE,CAAC;IACxF,CAAC;CACF;AAvBD,oGAuBC","sourcesContent":["import type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n  IActorOptimizeQueryOperationArgs,\n} from '@comunica/bus-optimize-query-operation';\nimport { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries/lib/Keys';\nimport type { IActorTest } from '@comunica/core';\nimport type { Algebra, Factory } from 'sparqlalgebrajs';\nimport { Util } from 'sparqlalgebrajs';\n\n/**\n * A comunica Construct Distinct Optimize Query Operation Actor.\n */\nexport class ActorOptimizeQueryOperationConstructDistinct extends ActorOptimizeQueryOperation {\n  public constructor(args: IActorOptimizeQueryOperationArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionOptimizeQueryOperation): Promise<IActorTest> {\n    if (!action.context.has(KeysInitQuery.distinctConstruct)) {\n      throw new Error(`${this.name} was not enabled by the query.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput> {\n    const operation = Util.mapOperation(action.operation, {\n      construct(op: Algebra.Construct, factory: Factory) {\n        return {\n          recurse: false,\n          result: factory.createDistinct(factory.createConstruct(op.input, op.template)),\n        };\n      },\n    });\n    return { operation, context: action.context.delete(KeysInitQuery.distinctConstruct) };\n  }\n}\n"]}