{"version":3,"file":"MemoryPhysicalQueryPlanLogger.js","sourceRoot":"","sources":["MemoryPhysicalQueryPlanLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IPhysicalQueryPlanLogger, IPlanNode } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { termToString } from 'rdf-string';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A physical query plan logger that stores everything in memory.\n */\nexport class MemoryPhysicalQueryPlanLogger implements IPhysicalQueryPlanLogger {\n  private readonly planNodes: Map<any, IPlanNode>;\n  private rootNode: IPlanNode | undefined;\n\n  public constructor() {\n    this.planNodes = new Map();\n  }\n\n  public logOperation(\n    logicalOperator: string,\n    physicalOperator: string | undefined,\n    node: any,\n    parentNode: any,\n    actor: string,\n    metadata: any,\n  ): void {\n    const planNode: IPlanNode = {\n      actor,\n      logicalOperator,\n      physicalOperator,\n      rawNode: node,\n      children: [],\n      metadata,\n    };\n    this.planNodes.set(node, planNode);\n\n    if (this.rootNode) {\n      if (!parentNode) {\n        throw new Error(`Detected more than one parent-less node`);\n      }\n      const planParentNode = this.planNodes.get(parentNode);\n      if (!planParentNode) {\n        throw new Error(`Could not find parent node`);\n      }\n      planParentNode.children.push(planNode);\n    } else {\n      if (parentNode) {\n        throw new Error(`No root node has been set yet, while a parent is being referenced`);\n      }\n      this.rootNode = planNode;\n    }\n  }\n\n  public stashChildren(node: any, filter?: (planNodeFilter: IPlanNode) => boolean): void {\n    const planNode = this.planNodes.get(node);\n    if (!planNode) {\n      throw new Error(`Could not find plan node`);\n    }\n    planNode.children = filter ? planNode.children.filter(filter) : [];\n  }\n\n  public unstashChild(\n    node: any,\n    parentNode: any,\n  ): void {\n    const planNode = this.planNodes.get(node);\n    if (planNode) {\n      const planParentNode = this.planNodes.get(parentNode);\n      if (!planParentNode) {\n        throw new Error(`Could not find plan parent node`);\n      }\n      planParentNode.children.push(planNode);\n    }\n  }\n\n  public appendMetadata(\n    node: any,\n    metadata: any,\n  ): void {\n    const planNode = this.planNodes.get(node);\n    if (planNode) {\n      planNode.metadata = {\n        ...planNode.metadata,\n        ...metadata,\n      };\n    }\n  }\n\n  public toJson(): IPlanNodeJson | Record<string, never> {\n    return this.rootNode ? this.planNodeToJson(this.rootNode) : {};\n  }\n\n  private planNodeToJson(node: IPlanNode): IPlanNodeJson {\n    const data: IPlanNodeJson = {\n      logical: node.logicalOperator,\n      physical: node.physicalOperator,\n      ...this.getLogicalMetadata(node.rawNode),\n      ...this.compactMetadata(node.metadata),\n    };\n\n    if (node.children.length > 0) {\n      data.children = node.children.map(child => this.planNodeToJson(child));\n    }\n\n    // Special case: compact children for bind joins.\n    if (data.physical === 'bind' && data.children) {\n      // Group children by query plan format\n      const childrenGrouped: Record<string, IPlanNodeJson[]> = {};\n      for (const child of data.children) {\n        const lastSubChild = child.children?.at(-1) ?? child;\n        const key = this.getPlanHash(lastSubChild).join(',');\n        if (!childrenGrouped[key]) {\n          childrenGrouped[key] = [];\n        }\n        childrenGrouped[key].push(child);\n      }\n\n      // Compact query plan occurrences\n      const childrenCompact: IPlanNodeJsonChildCompact[] = [];\n      for (const children of Object.values(childrenGrouped)) {\n        childrenCompact.push({\n          occurrences: children.length,\n          firstOccurrence: children[0],\n        });\n      }\n\n      // Replace children with compacted representation\n      data.childrenCompact = childrenCompact;\n      delete data.children;\n    }\n\n    return data;\n  }\n\n  private getPlanHash(node: IPlanNodeJson): string[] {\n    let entries = [ `${node.logical}-${node.physical}` ];\n    if (node.children) {\n      entries = [\n        ...entries,\n        ...node.children.flatMap(child => this.getPlanHash(child)),\n      ];\n    } else if (node.childrenCompact) {\n      entries = [\n        ...entries,\n        ...node.childrenCompact.flatMap(child => this.getPlanHash(child.firstOccurrence)),\n      ];\n    }\n    return entries;\n  }\n\n  private compactMetadata(metadata: any): any {\n    return Object.fromEntries(Object.entries(metadata)\n      .map(([ key, value ]) => [ key, this.compactMetadataValue(value) ]));\n  }\n\n  private compactMetadataValue(value: any): any {\n    return value && typeof value === 'object' && 'termType' in value ? this.getLogicalMetadata(value) : value;\n  }\n\n  private getLogicalMetadata(rawNode: any): IPlanNodeJsonLogicalMetadata {\n    const data: IPlanNodeJsonLogicalMetadata = {};\n\n    if ('type' in rawNode) {\n      const operation: Algebra.Operation = rawNode;\n\n      if (operation.metadata?.scopedSource) {\n        data.source = (<any> operation.metadata.scopedSource).source.toString();\n      }\n\n      // eslint-disable-next-line ts/switch-exhaustiveness-check\n      switch (operation.type) {\n        case 'pattern':\n          data.pattern = this.quadToString(operation);\n          break;\n        case 'project':\n          data.variables = operation.variables.map(variable => variable.value);\n          break;\n      }\n    }\n\n    return data;\n  }\n\n  private quadToString(quad: RDF.BaseQuad): string {\n    return `${termToString(quad.subject)} ${termToString(quad.predicate)} ${termToString(quad.object)}${quad.graph.termType === 'DefaultGraph' ? '' : ` ${termToString(quad.graph)}`}`;\n  }\n\n  public toCompactString(): string {\n    const node = this.toJson();\n    const lines: string[] = [];\n    const sources: Map<string, number> = new Map();\n\n    if ('logical' in node) {\n      this.nodeToCompactString(lines, sources, '', <IPlanNodeJson> node);\n    } else {\n      lines.push('Empty');\n    }\n\n    if (sources.size > 0) {\n      lines.push('');\n      lines.push('sources:');\n      for (const [ key, id ] of sources.entries()) {\n        lines.push(`  ${id}: ${key}`);\n      }\n    }\n\n    return lines.join('\\n');\n  }\n\n  public nodeToCompactString(\n    lines: string[],\n    sources: Map<string, number>,\n    indent: string,\n    node: IPlanNodeJson,\n    metadata?: string,\n  ): void {\n    let sourceId: number | undefined;\n    if (node.source) {\n      sourceId = sources.get(node.source);\n      if (sourceId === undefined) {\n        sourceId = sources.size;\n        sources.set(node.source, sourceId);\n      }\n    }\n\n    lines.push(`${\n      indent}${\n      node.logical}${\n      node.physical ? `(${node.physical})` : ''}${\n      node.pattern ? ` (${node.pattern})` : ''}${\n      node.variables ? ` (${node.variables.join(',')})` : ''}${\n      node.bindOperation ? ` bindOperation:(${node.bindOperation.pattern}) bindCardEst:${node.bindOperationCardinality.type === 'estimate' ? '~' : ''}${numberToString(node.bindOperationCardinality.value)}` : ''}${\n      node.cardinality ? ` cardEst:${node.cardinality.type === 'estimate' ? '~' : ''}${numberToString(node.cardinality.value)}` : ''}${\n      node.source ? ` src:${sourceId}` : ''}${\n      node.cardinalityReal ? ` cardReal:${node.cardinalityReal}` : ''}${\n      node.timeSelf ? ` timeSelf:${numberToString(node.timeSelf)}ms` : ''}${\n      node.timeLife ? ` timeLife:${numberToString(node.timeLife)}ms` : ''}${\n      metadata ? ` ${metadata}` : ''}`);\n    for (const child of node.children ?? []) {\n      this.nodeToCompactString(lines, sources, `${indent}  `, child);\n    }\n    for (const child of node.childrenCompact ?? []) {\n      this.nodeToCompactString(lines, sources, `${indent}  `, child.firstOccurrence, `compacted-occurrences:${child.occurrences}`);\n    }\n  }\n}\n\nexport function numberToString(value: number): string {\n  return value.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 3 });\n}\n\ninterface IPlanNodeJson extends IPlanNodeJsonLogicalMetadata {\n  logical: string;\n  physical?: string;\n  [metadataKey: string]: any;\n  children?: IPlanNodeJson[];\n  childrenCompact?: IPlanNodeJsonChildCompact[];\n}\n\ninterface IPlanNodeJsonChildCompact {\n  occurrences: number;\n  firstOccurrence: IPlanNodeJson;\n}\n\ninterface IPlanNodeJsonLogicalMetadata {\n  pattern?: string;\n  source?: string;\n  variables?: string[];\n  cardinality?: RDF.QueryResultCardinality;\n}\n"]}