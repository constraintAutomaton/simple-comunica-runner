{"version":3,"file":"ActorQueryOperationDistinctHash.js","sourceRoot":"","sources":["ActorQueryOperationDistinctHash.ts"],"names":[],"mappings":";;;AAGA,uEAGuC;AAcvC;;GAEG;AACH,MAAa,+BAAgC,SAAQ,sDAAkD;IAIrG,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC1B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA4B,EAAE,QAAwB;QAC/E,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAA2B,EAAE,OAAuB;QAC5E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAElG,sFAAsF;QACtF,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,iBAAiB,KAAK,SAAS,EAAE,CAAC;YACpE,MAAM,WAAW,GAA+B,yCAAmB,CAAC,YAAY,CAC9E,MAAM,CACP,CAAC;YAEF,MAAM,UAAU,GAA4B,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;YAClH,OAAO;gBACL,IAAI,EAAE,OAAO;gBACb,UAAU;gBACV,QAAQ,EAAE,WAAW,CAAC,QAAQ;aAC/B,CAAC;QACJ,CAAC;QAED,MAAM,cAAc,GAAkC,yCAAmB,CAAC,eAAe,CACvF,MAAM,CACP,CAAC;QAEF,MAAM,cAAc,GAAmB,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/G,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,cAAc,CAAC,QAAQ;SAClC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,aAAa,CAAC,OAAuB;QAChD,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACzG,MAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,OAAO,CAAC,QAAkB,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAW,YAAY,CAAC,QAAQ,CAAC,CAAC;YAE5C,OAAO,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,kBAAkB,CAAC,OAAuB;QACrD,yFAAyF;QACzF,IAAI,IAAI,CAAC,iBAAiB,KAAK,SAAS,EAAE,CAAC;YACzC,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC;QACvB,CAAC;QACD,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACtG,MAAM,MAAM,GAA4B,EAAE,CAAC;QAC3C,OAAO,CAAC,IAAc,EAAE,EAAE;YACxB,MAAM,IAAI,GAAW,YAAY,CAAC,IAAI,CAAC,CAAC;YAExC,OAAO,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC;CACF;AA5ED,0EA4EC","sourcesContent":["import type { MediatorHashBindings } from '@comunica/bus-hash-bindings';\nimport type { MediatorHashQuads } from '@comunica/bus-hash-quads';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperation,\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { IActorTest } from '@comunica/core';\nimport type {\n  Bindings,\n  BindingsStream,\n  IActionContext,\n  IQueryOperationResult,\n  IQueryOperationResultBindings,\n  IQueryOperationResultQuads,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Distinct Hash Query Operation Actor.\n */\nexport class ActorQueryOperationDistinctHash extends ActorQueryOperationTypedMediated<Algebra.Distinct> {\n  public readonly mediatorHashBindings: MediatorHashBindings;\n  public readonly mediatorHashQuads: MediatorHashQuads;\n\n  public constructor(args: IActorQueryOperationDistinctHashArgs) {\n    super(args, 'distinct');\n  }\n\n  public async testOperation(_operation: Algebra.Distinct, _context: IActionContext): Promise<IActorTest> {\n    return true;\n  }\n\n  public async runOperation(operation: Algebra.Distinct, context: IActionContext): Promise<IQueryOperationResult> {\n    const output = await this.mediatorQueryOperation.mediate({ operation: operation.input, context });\n\n    // TODO: In next/major, remove undefined check when mediatorHashQuads is made required\n    if (output.type === 'quads' && this.mediatorHashQuads !== undefined) {\n      const outputQuads: IQueryOperationResultQuads = ActorQueryOperation.getSafeQuads(\n        output,\n      );\n\n      const quadStream: AsyncIterator<RDF.Quad> = outputQuads.quadStream.filter(await this.newHashFilterQuads(context));\n      return {\n        type: 'quads',\n        quadStream,\n        metadata: outputQuads.metadata,\n      };\n    }\n\n    const outputBindings: IQueryOperationResultBindings = ActorQueryOperation.getSafeBindings(\n      output,\n    );\n\n    const bindingsStream: BindingsStream = outputBindings.bindingsStream.filter(await this.newHashFilter(context));\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: outputBindings.metadata,\n    };\n  }\n\n  /**\n   * Create a new distinct filter function.\n   * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n   * @param context The action context.\n   * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n   */\n  public async newHashFilter(context: IActionContext): Promise<(bindings: Bindings) => boolean> {\n    const { hashFunction } = await this.mediatorHashBindings.mediate({ allowHashCollisions: true, context });\n    const hashes: Record<string, boolean> = {};\n    return (bindings: Bindings) => {\n      const hash: string = hashFunction(bindings);\n\n      return !(hash in hashes) && (hashes[hash] = true);\n    };\n  }\n\n  /**\n   * Create a new distinct filter function to hash quads.\n   * This will maintain an internal hash datastructure so that every quad object only returns true once.\n   * @param context The action context.\n   * @return {(quad: RDF.Quad) => boolean} A distinct filter for quads.\n   */\n  public async newHashFilterQuads(context: IActionContext): Promise<(quad: RDF.Quad) => boolean> {\n    // TODO: In next/major, this check can be removed when mediatorHashQuads is made required\n    if (this.mediatorHashQuads === undefined) {\n      return _quad => true;\n    }\n    const { hashFunction } = await this.mediatorHashQuads.mediate({ allowHashCollisions: true, context });\n    const hashes: Record<string, boolean> = {};\n    return (quad: RDF.Quad) => {\n      const hash: string = hashFunction(quad);\n\n      return !(hash in hashes) && (hashes[hash] = true);\n    };\n  }\n}\n\nexport interface IActorQueryOperationDistinctHashArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorHashBindings: MediatorHashBindings;\n  // TODO: In next/major, this field should be made required in the next major update\n  mediatorHashQuads?: MediatorHashQuads;\n}\n"]}