import type * as RDF from '@rdfjs/types';
import type { InconsistentPositiveAndNegativePredicateError, IShape } from './Shape';
/**
 * Parse a Shex shape from a set of quads
 * @param {RDF.Stream | RDF.Quad[]} quads - Quads representing a shape
 * @param {string} shapeIri - The iri of the desired shape
 * @returns {Promise<IShape | ShapeError>} The shape
 * @todo support for `OR` statement
 */
export declare function shapeFromQuads(quads: RDF.Stream | RDF.Quad[], shapeIri: string): Promise<IShape | ShapeError>;
/**
 * An error to indicate that the shape is poorly formated
 */
export declare class ShapePoorlyFormatedError extends Error {
    constructor(message: string);
}
type ShapeError = ShapePoorlyFormatedError | InconsistentPositiveAndNegativePredicateError;
export {};
