{"version":3,"file":"Triple.js","sourceRoot":"","sources":["../../lib/Triple.ts"],"names":[],"mappings":";;;AA2BA;;GAEG;AACH,IAAkB,aAIjB;AAJD,WAAkB,aAAa;IAC7B,iDAAI,CAAA;IACJ,qDAAM,CAAA;IACN,iDAAI,CAAA;AACN,CAAC,EAJiB,aAAa,6BAAb,aAAa,QAI9B;AAiBD;;GAEG;AACH,MAAa,MAAM;IAEjB;;;;;;KAMC;IACM,MAAM,CAAU,sBAAsB,GAAG,GAAG,CAAC;IACpC,SAAS,CAAS;IAClB,OAAO,CAAS;IAChB,MAAM,CAAgB;IACtC,mCAAmC;IACnB,WAAW,CAAgB;IAC3B,UAAU,CAAe;IACzB,UAAU,CAAU;IAEpC;;;OAGG;IACH,YAAmB,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAe;QAC3G,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,KAAK,CAAC;QACtC,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;YACjE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAC;IACJ,CAAC;IAEM,oBAAoB;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,KAAK,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE,QAAQ,KAAK,WAAW,CAAC,EAAE,CAAC;YACnH,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAA;QAC1B,CAAC;IACH,CAAC;IAEM,QAAQ;QACb,OAAO,CAAC,IAAI,CAAC,UAAU;YACrB,CAAC;gBACD,IAAI,IAAI,CAAC,OAAO,MAAM,IAAI,CAAC,SAAS,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG;YACxE,CAAC;gBACD,IAAI,IAAI,CAAC,OAAO,aAAa,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CACtG;IACL,CAAC;;AArEH,wBAuEC","sourcesContent":["import type { Term } from '@rdfjs/types';\nimport { ICardinality } from './Shape';\n\n/**\n * The information to create a query from a star pattern\n */\nexport interface IStarPatternWithDependencies {\n  // indexed by predicate\n  starPattern: Map<string, ITripleWithDependencies>;\n  filterExpression?: string;\n  name: string;\n  isVariable: boolean;\n}\n\nexport interface ITripleWithDependencies {\n  triple: ITriple;\n  dependencies?: IStarPatternWithDependencies;\n}\n\n/**\n * A Triple interface\n */\nexport interface ITriple extends ITripleArgs {\n  toObject: () => ITripleArgs;\n  getLinkedStarPattern: () => string | undefined\n  toString: () => string;\n}\n/**\n * The type of alignment\n */\nexport const enum AlignmentType {\n  WEAK,\n  STRONG,\n  None,\n}\n/**\n * A Triple object\n */\nexport interface ITripleArgs {\n  subject: string;\n  // The iri of a property\n  predicate: string;\n  // The object related to the property\n  // if there are multiple object than it means that\n  // the object was a variable and a VALUES clase was used\n  // to bind it to multiple values\n  object: Term | Term[];\n  isOptional?: boolean;\n  cardinality?: ICardinality;\n  negatedSet?: Set<string>;\n}\n/**\n * A Triple\n */\nexport class Triple implements ITriple {\n\n  /**\n * Indicate that the predicate can be anything.\n * It is used for the \"NegatedPropertySet\" \n * https://www.w3.org/TR/sparql11-query/#propertypaths\n * \n * The negatedSet property must be checked for any analysis\n */\n  public static readonly NEGATIVE_PREDICATE_SET = \"*\";\n  public readonly predicate: string;\n  public readonly subject: string;\n  public readonly object: Term | Term[];\n  // the cardinality of the predicate\n  public readonly cardinality?: ICardinality;\n  public readonly negatedSet?: Set<string>;\n  public readonly isOptional: boolean;\n\n  /**\n   *\n   * @param {ITripleArgs} tripleObject - A triple object\n   */\n  public constructor({ subject, predicate, object, cardinality, negatedSet: negative, isOptional }: ITripleArgs) {\n    this.predicate = predicate;\n    this.object = object;\n    this.subject = subject;\n    this.cardinality = cardinality;\n    this.negatedSet = negative;\n    this.isOptional = isOptional ?? false;\n    if (this.cardinality !== undefined && this.cardinality.min === 0) {\n      this.isOptional = true;\n    }\n\n    Object.freeze(this.negatedSet);\n    Object.freeze(this.cardinality);\n    Object.freeze(this.predicate);\n    Object.freeze(this.isOptional);\n    Object.freeze(this.object);\n    Object.freeze(this.subject);\n    Object.freeze(this);\n  }\n\n  /**\n   * Return a triple object\n   * @returns {ITripleArgs} a Triple object\n   */\n  public toObject(): ITripleArgs {\n    return {\n      subject: this.subject,\n      predicate: this.predicate,\n      object: this.object,\n      cardinality: this.cardinality,\n      isOptional: this.isOptional\n    };\n  }\n\n  public getLinkedStarPattern(): string | undefined {\n    if (!Array.isArray(this.object) && (this.object?.termType === \"Variable\" || this.object?.termType === \"NamedNode\")) {\n      return this.object.value\n    }\n  }\n\n  public toString(): string {\n    return !this.negatedSet\n      ?\n      `<${this.subject}> <${this.predicate}> <${JSON.stringify(this.object)}>`\n      :\n      `<${this.subject}> NEGATE(<${Array.from(this.negatedSet).join(' ')}>) <${JSON.stringify(this.object)}>`\n      ;\n  }\n\n}\n"]}