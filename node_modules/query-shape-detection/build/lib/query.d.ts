import { Algebra } from 'sparqlalgebrajs';
import { type IStarPatternWithDependencies } from './Triple';
/**
 * A query divided into star patterns
 */
export interface IQuery {
    starPatterns: Map<string, IStarPatternWithDependencies>;
    union?: IQuery[][];
    filterExpression?: string;
}
export declare function generateStarPatternUnion(union: IQuery[][], starPatternName: string): IStarPatternWithDependencies[][];
/**
 * Divide a query into star patterns
 * @param {Algebra.Operation} algebraQuery - the algebra of a query
 * @returns {Query} - A query divided into subject group where the predicate has to be an IRI
 * @todo add support for the bind operator
 */
export declare function generateQuery(algebraQuery: Algebra.Operation, optional?: boolean): IQuery;
