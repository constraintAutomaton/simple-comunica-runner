"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpLoginHandler = void 0;
const http = require("http");
const open = require("open");
/**
 * Handles the Solid login process by starting a temporary HTTP server.
 */
class HttpLoginHandler {
    constructor(options) {
        this.port = options.port;
        this.session = options.session;
    }
    /**
     * Start a temporary HTTP server for handling the login process.
     * @param options Login options.
     */
    handleLogin(options) {
        return __awaiter(this, void 0, void 0, function* () {
            // Determine login options
            options.redirectUrl = `http://localhost:${this.port}/onLoggedIn`;
            if (!options.clientName) {
                options.clientName = '@rubensworks/solid-node-interactive-auth';
            }
            if (!options.handleRedirect) {
                options.handleRedirect = redirectUrl => open(redirectUrl);
            }
            // Start temporary server
            let server;
            const sockets = [];
            const onLoggedIn = new Promise((resolve, reject) => {
                server = http.createServer((req, res) => {
                    if (req.url.startsWith('/onLoggedIn')) {
                        this.session.handleIncomingRedirect(`http://localhost:${this.port}${req.url}`)
                            .then(resolve, reject);
                        res.writeHead(200);
                        res.end(`<script>window.location = new URL('http://localhost:${this.port}/done'); window.close();</script>`);
                    }
                    else if (req.url.startsWith('/done')) {
                        res.writeHead(200);
                        res.end(`<script>window.close();</script>`);
                    }
                    else {
                        res.writeHead(404);
                        res.end(`This temporary server only accepts /onLoggedIn requests`);
                    }
                });
                server.listen(this.port);
                // Avoid hanging server after close
                server.on('connection', socket => sockets.push(socket));
            });
            // Trigger login process
            yield this.session.login(options);
            // Wait for server to handle incoming redirect
            yield onLoggedIn;
            // Close the server
            server.close();
            for (const socket of sockets) {
                socket.destroy();
            }
            // Ensure we are logged in
            if (!this.session.info.isLoggedIn) {
                throw new Error(`Login process has failed`);
            }
        });
    }
}
exports.HttpLoginHandler = HttpLoginHandler;
//# sourceMappingURL=HttpLoginHandler.js.map