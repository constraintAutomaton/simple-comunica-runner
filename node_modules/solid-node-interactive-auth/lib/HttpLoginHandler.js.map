{"version":3,"file":"HttpLoginHandler.js","sourceRoot":"","sources":["HttpLoginHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA6B;AAK7B,6BAA6B;AAE7B;;GAEG;AACH,MAAa,gBAAgB;IAI3B,YAAmB,OAAiC;QAClD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACjC,CAAC;IAED;;;OAGG;IACU,WAAW,CAAC,OAA2B;;YAClD,0BAA0B;YAC1B,OAAO,CAAC,WAAW,GAAG,oBAAoB,IAAI,CAAC,IAAI,aAAa,CAAC;YACjE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;gBACvB,OAAO,CAAC,UAAU,GAAG,0CAA0C,CAAC;aACjE;YACD,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;gBAC3B,OAAO,CAAC,cAAc,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC3D;YAED,yBAAyB;YACzB,IAAI,MAAc,CAAC;YACnB,MAAM,OAAO,GAAiB,EAAE,CAAC;YACjC,MAAM,UAAU,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACjD,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;oBACtC,IAAI,GAAG,CAAC,GAAI,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;wBACtC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;6BAC3E,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBACzB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,GAAG,CAAC,uDAAuD,IAAI,CAAC,IAAI,mCAAmC,CAAC,CAAC;qBAC9G;yBAAM,IAAI,GAAG,CAAC,GAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;wBACvC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;qBAC7C;yBAAM;wBACL,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;qBACpE;gBACH,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEzB,mCAAmC;gBACnC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,wBAAwB;YACxB,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAElC,8CAA8C;YAC9C,MAAM,UAAU,CAAC;YAEjB,mBAAmB;YACnB,MAAO,CAAC,KAAK,EAAE,CAAC;YAChB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC5B,MAAM,CAAC,OAAO,EAAE,CAAC;aAClB;YAED,0BAA0B;YAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;aAC7C;QACH,CAAC;KAAA;CACF;AAhED,4CAgEC","sourcesContent":["import * as http from 'http';\nimport type { Server } from 'http';\nimport type * as net from 'net';\nimport type { ILoginInputOptions } from '@inrupt/solid-client-authn-core';\nimport type { Session } from '@inrupt/solid-client-authn-node';\nimport * as open from 'open';\n\n/**\n * Handles the Solid login process by starting a temporary HTTP server.\n */\nexport class HttpLoginHandler {\n  private readonly port: number;\n  private readonly session: Session;\n\n  public constructor(options: IHttpLoginHandlerOptions) {\n    this.port = options.port;\n    this.session = options.session;\n  }\n\n  /**\n   * Start a temporary HTTP server for handling the login process.\n   * @param options Login options.\n   */\n  public async handleLogin(options: ILoginInputOptions): Promise<void> {\n    // Determine login options\n    options.redirectUrl = `http://localhost:${this.port}/onLoggedIn`;\n    if (!options.clientName) {\n      options.clientName = '@rubensworks/solid-node-interactive-auth';\n    }\n    if (!options.handleRedirect) {\n      options.handleRedirect = redirectUrl => open(redirectUrl);\n    }\n\n    // Start temporary server\n    let server: Server;\n    const sockets: net.Socket[] = [];\n    const onLoggedIn = new Promise((resolve, reject) => {\n      server = http.createServer((req, res) => {\n        if (req.url!.startsWith('/onLoggedIn')) {\n          this.session.handleIncomingRedirect(`http://localhost:${this.port}${req.url}`)\n            .then(resolve, reject);\n          res.writeHead(200);\n          res.end(`<script>window.location = new URL('http://localhost:${this.port}/done'); window.close();</script>`);\n        } else if (req.url!.startsWith('/done')) {\n          res.writeHead(200);\n          res.end(`<script>window.close();</script>`);\n        } else {\n          res.writeHead(404);\n          res.end(`This temporary server only accepts /onLoggedIn requests`);\n        }\n      });\n      server.listen(this.port);\n\n      // Avoid hanging server after close\n      server.on('connection', socket => sockets.push(socket));\n    });\n\n    // Trigger login process\n    await this.session.login(options);\n\n    // Wait for server to handle incoming redirect\n    await onLoggedIn;\n\n    // Close the server\n    server!.close();\n    for (const socket of sockets) {\n      socket.destroy();\n    }\n\n    // Ensure we are logged in\n    if (!this.session.info.isLoggedIn) {\n      throw new Error(`Login process has failed`);\n    }\n  }\n}\n\nexport interface IHttpLoginHandlerOptions {\n  /**\n   * Port of the temporary HTTP server to start on the local host.\n   */\n  port: number;\n  /**\n   * The session to authenticate.\n   */\n  session: Session;\n}\n"]}