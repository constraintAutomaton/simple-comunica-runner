{"version":3,"file":"Util.js","sourceRoot":"","sources":["Util.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,6EAA0D;AAC1D,yDAAsD;AAEtD;;;GAGG;AACH,SAAsB,gBAAgB,CAAC,UAAyB,EAAE;;QAChE,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,iCAAO,EAAE,CAAC;QAEjD,MAAM,IAAI,mCAAgB,CAAC;YACzB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,IAAI;YAC1B,OAAO;SACR,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAExB,OAAO,OAAO,CAAC;IACjB,CAAC;CAAA;AATD,4CASC","sourcesContent":["import type { ILoginInputOptions } from '@inrupt/solid-client-authn-core';\nimport { Session } from '@inrupt/solid-client-authn-node';\nimport { HttpLoginHandler } from './HttpLoginHandler';\n\n/**\n * Login to an existing or new session by opening the user's Web browser.\n * @param options Login options.\n */\nexport async function interactiveLogin(options: ILoginOptions = {}): Promise<Session> {\n  const session = options.session || new Session();\n\n  await new HttpLoginHandler({\n    port: options.port || 3005,\n    session,\n  }).handleLogin(options);\n\n  return session;\n}\n\nexport interface ILoginOptions extends ILoginInputOptions {\n  /**\n   * The session to authenticate.\n   */\n  session?: Session;\n  /**\n   * Port of the temporary HTTP server to start on the local host.\n   */\n  port?: number;\n}\n"]}